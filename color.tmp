t_vector3 light = ksx_vec3_set(450.f, 300.f, -250.f);

compute_lighting(&ray.point, &ray.norm, &light, &ray.pixel.color);

t_color compute_lighting(t_vector3 *p_point, t_vector3 *p_norm,
	t_vector3 *p_light, t_color *p_color)
{
	t_vector3 dir = ksx_vec3_sub(p_light, p_point);
	dir = ksx_vec3_unit(&dir);
	*p_norm = ksx_vec3_unit(p_norm);

	// Фоновая подсветка
	float ambient = 0.2f; 

	// Диффузное освещение
	float diff = fmax(0.f, ksx_vec3_dot(p_norm, &dir));

	// Зеркальное отражение
	t_vector3 reflect_dir = ksx_vec3_reflect(&dir, p_norm);
	t_vector3 view_dir = ksx_vec3_unit(p_point); // Камера в (0,0,0)
	float spec = powf(fmax(ksx_vec3_dot(&reflect_dir, &view_dir), 0.f), 256);

	// Итоговое освещение
	float intensity = ambient + (1.0f - ambient) * diff + 0.5f * spec;
	intensity = fminf(intensity, 1.0f); // Ограничение яркости

	p_color->r = (uint8_t)((p_color->r * intensity));
	p_color->g = (uint8_t)((p_color->g * intensity));
	p_color->b = (uint8_t)((p_color->b * intensity));
	return (*p_color);
}

